package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/RushinShah22/e-commerce-micro/gateway/graph/model"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterInput) (*model.User, error) {
	data, err := json.Marshal(input)

	if err != nil {
		panic(err)
	}

	userReader := bytes.NewReader(data)

	req, err := http.NewRequest(http.MethodPost, r.UserURL, userReader)

	req.Header.Set("Content-Type", "application/json")

	client := http.Client{
		Timeout: 30 * time.Second,
	}

	resp, err := client.Do(req)

	if err != nil {
		panic(err)
	}

	var user *model.User
	json.NewDecoder(resp.Body).Decode(&user)
	return user, nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.ProductInput, id string) (*model.Product, error) {
	data, err := json.Marshal(input)

	if err != nil {
		panic(err)
	}

	productReader := bytes.NewReader(data)

	req, err := http.NewRequest(http.MethodPost, r.ProductURL, productReader)

	req.Header.Set("Content-Type", "application/json")

	client := http.Client{
		Timeout: 30 * time.Second,
	}

	resp, err := client.Do(req)

	if err != nil {
		panic(err)
	}

	var product *model.Product
	json.NewDecoder(resp.Body).Decode(&product)
	return product, nil
}

// PlaceOrder is the resolver for the placeOrder field.
func (r *mutationResolver) PlaceOrder(ctx context.Context, input model.OrderInput, id string) (*model.Order, error) {
	data, err := json.Marshal(input)

	if err != nil {
		panic(err)
	}

	orderReader := bytes.NewReader(data)

	req, err := http.NewRequest(http.MethodPost, r.OrderURL, orderReader)

	req.Header.Set("Content-Type", "application/json")

	client := http.Client{
		Timeout: 30 * time.Second,
	}

	resp, err := client.Do(req)

	if err != nil {
		panic(err)
	}

	var order *model.Order
	json.NewDecoder(resp.Body).Decode(&order)
	return order, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input *model.LoginInput) (*model.User, error) {
	jsonData, err := json.Marshal(input)

	if err != nil {
		return nil, fmt.Errorf("Something went wrong.")
	}
	data := bytes.NewReader(jsonData)
	req, err := http.NewRequest(http.MethodPost, r.UserURL+"/"+"verify", data)

	if err != nil {
		return nil, fmt.Errorf("Something went wrong.")
	}

	client := http.Client{
		Timeout: time.Second * 30,
	}
	resp, err := client.Do(req)

	if err != nil {
		return nil, err
	}
	var user model.User

	json.NewDecoder(resp.Body).Decode(&user)

	token, err := GenerateToken(user.ID, user.Role)

	if err != nil {
		fmt.Println(err)
		return nil, fmt.Errorf("Something went wrong.")
	}

	c := ctx.Value("writer").(http.ResponseWriter)
	c.Header().Set("token", token)

	return &user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	resp, err := http.Get(r.UserURL)

	if err != nil {
		log.Println(err)
		return nil, err
	}
	var users []*model.User
	json.NewDecoder(resp.Body).Decode(&users)
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	resp, err := http.Get(r.UserURL + "/" + id)
	if err != nil {
		panic(err)
	}

	var user *model.User
	json.NewDecoder(resp.Body).Decode(&user)
	return user, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	resp, err := http.Get(r.ProductURL)

	if err != nil {
		panic(err)
	}

	var products []*model.Product

	json.NewDecoder(resp.Body).Decode(&products)
	return products, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	resp, err := http.Get(r.ProductURL + "/" + id)

	if err != nil {
		fmt.Print("YESS")
		panic(err)
	}

	var product *model.Product
	json.NewDecoder(resp.Body).Decode(&product)
	return product, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	resp, err := http.Get(r.OrderURL)

	if err != nil {
		panic(err)
	}

	var orders []*model.Order

	json.NewDecoder(resp.Body).Decode(&orders)
	return orders, nil
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	resp, err := http.Get(r.OrderURL + "/" + id)

	if err != nil {
		panic(err)
	}

	var order *model.Order
	json.NewDecoder(resp.Body).Decode(&order)
	return order, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
